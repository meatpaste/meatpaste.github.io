export default [
  "function greet(string $name) { echo \"Hello, $name!\"; }",
  "class User { public string $username; private int $id; }",
  "$message = 'This is a slightly longer string.';",
  "if ($value === null || $value === '') { /* handle empty */ }",
  "for ($i = 0; $i < count($elements); $i++) { echo $elements[$i]; }",
  "array_push($myStack, 'item1', 'item2');",
  "$config = ['host' => 'localhost', 'port' => 3306];",
  "public function setUserId(int $newId): void { $this->id = $newId; }",
  "protected function logEvent(string $event): bool { return true; }",
  "str_replace('foo', 'bar', $originalString);",
  "implode(', ', ['apple', 'banana', 'cherry']);",
  "$filePath = __DIR__ . '/data/file.txt';",
  "if (file_exists($filePath)) { /* read file */ }",
  "json_encode(['key' => 'value', 'number' => 42]);",
  "preg_match('/pattern/', $subject, $matches);",
  "function processInput(array $input): array { return []; }",
  "class Product { public string $name; public float $price; }",
  "$product = new Product(); $product->name = 'Awesome Thing';",
  "try { $result = risky_function(); } catch (Throwable $t) {}",
  "$_COOKIE['remember_me'] = 'yes_please_remember_me_for_a_while';",
  "const DEFAULT_TIMEOUT = 60;", "static public function getInstance() {}",
  "if (!($data = get_data())) { return null; }",
  "foreach ($long_list_of_items as $single_item_in_the_list) {}",
  "function calculateSum(float ...$numbers): float { return array_sum($numbers); }",
  "interface Drawable { public function draw(): string; }",
  "abstract class Shape { protected string $color; }",
  "trait Loggable { public function log($msg) { print $msg; } }",
  "new PDO('sqlite::memory:');", "htmlspecialchars($userInput, ENT_QUOTES, 'UTF-8');",
  "if ($request->method === 'POST' && $request->isValid()) {}",
  "function getSillyName(): string { return 'Captain Fluffybottom'; }",
  "$animal = 'Wombat'; $action = 'Wombles';", "$animal->$action();",
  "// This is a slightly more elaborate comment for typing practice.",
  "/* And this is a multi-line comment \n that spans two lines. */",
  "MyConstants::APP_VERSION;", "yield from generateNumbers();",
  "match ($httpCode) { 200 => 'OK', 404 => 'Not Found', default => 'Error' };",
  "$user->profile->avatar_url = 'https://example.com/avatar.png';",
  "if ($obj?->first?->second?->third) { echo 'Deeply nested!'; }",
  "function makeItRain(string $currency = '$', int $amount = 1000000) {}"
];
